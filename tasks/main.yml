---

#################################################
# one time setup
#################################################

- name: "check for defined host variable"
  fail: msg="Key host is not defined"
  when: item.host is not defined
  with_items: "{{ letsencrypt_certs }}"

- name: create csr directory
  file:
    path: '{{ letsencrypt_csrs_dir }}'
    state: directory

- name: create certs directory
  file:
    path: '{{ letsencrypt_certs_dir }}'
    state: directory
    mode: '{{ letsencrypt_certs_dir_permissions }}'
    owner: '{{ letsencrypt_certs_dir_owner }}'
    group: '{{ letsencrypt_certs_dir_group }}'

- name: create key directory
  file:
    path: '{{ letsencrypt_keys_dir }}'
    state: directory
    mode: '{{ letsencrypt_keys_dir_permissions }}'
    owner: '{{ letsencrypt_keys_dir_owner }}'
    group: '{{ letsencrypt_keys_dir_group }}'

- name: create challenges directory
  file:
    path: '{{ letsencrypt_challenges_dir }}'
    state: directory
    mode: '{{ letsencrypt_challenges_dir_permissions }}'
    owner: '{{ letsencrypt_challenges_dir_owner }}'
    group: '{{ letsencrypt_challenges_dir_group }}'

- name: copy Letsencrypt account key source file
  copy:
    src: "{{ letsencrypt_account_key_source_file }}"
    dest: "{{ letsencrypt_account_key }}"
  when: letsencrypt_account_key_source_file is defined

- name: copy Letsencrypt account key source contents
  copy:
    content: "{{ letsencrypt_account_key_source_content|trim }}"
    dest: "{{ letsencrypt_account_key }}"
  when: letsencrypt_account_key_source_content is defined

- name: generate a new account key
  shell: >
    openssl genrsa {{ letsencrypt_key_size }} > {{ letsencrypt_account_key }}
  args:
    creates: "{{ letsencrypt_account_key }}"
  register: generate_account_key

- name: ensure correct permissions on account key
  file:
    path: "{{ letsencrypt_account_key }}"
    mode: "{{ letsencrypt_keys_dir_permissions }}"
    owner: "{{ letsencrypt_keys_dir_owner }}"
    group: "{{ letsencrypt_keys_dir_group }}"

- name: print account public key
  command: >
    openssl rsa -in {{ letsencrypt_account_key }} -pubout
  register: account_public_key
  when: generate_account_key | changed

- name: "Please register the account public key with Letsencrypt, using for example https://gethttpsforfree.com/"
  debug: var=account_public_key.stdout
  when: generate_account_key | changed

- name: download intermediate certificate
  get_url:
    url: "{{ letsencrypt_intermediate_cert_url }}"
    dest: "{{ letsencrypt_intermediate_cert_path }}"
    sha256sum: "{{ letsencrypt_intermediate_cert_sha256sum }}"

#################################################
# key setup
#################################################

- name: generate private keys
  shell: >
    openssl genrsa {{ letsencrypt_key_size }} > {{ letsencrypt_keys_path }}
  args:
    creates: "{{ letsencrypt_keys_path }}"
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

- name: ensure correct permissions on private keys
  file:
    path: "{{ letsencrypt_keys_path }}"
    owner: "{{ item.key_owner | default(letsencrypt_default_key_owner) }}"
    group: "{{ item.key_group | default(letsencrypt_default_key_group) }}"
    mode: "{{ item.key_permissions | default(letsencrypt_default_key_permissions) }}"
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

- name: generate csrs for single domain keys
  shell: >
    openssl req -new -sha256 -key '{{ letsencrypt_keys_path }}' -subj '/CN={{ item.host }}' > {{ letsencrypt_csrs_path }}
  args:
    creates: "{{ letsencrypt_csrs_path }}"
  when: item.host is string
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

- name: generate csrs for multi domain keys
  shell: "openssl req -new -sha256 -key '{{ letsencrypt_keys_path }}' -subj '/' -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf '[SAN]\nsubjectAltName=DNS:{{ item.host|join(',DNS:') }}')) > {{ letsencrypt_csrs_path }}"
  args:
    # we must use bash here because dash (default on Debian) throws an error "unexpected ( on line 1"
    executable: "/bin/bash"
    creates: "{{ letsencrypt_csrs_path }}"
  when: item.host is not string
  with_items: "{{ letsencrypt_certs }}"
  tags: ['letsencrypt_keys']

#################################################
# request certs
#################################################

- set_fact:
    working_date: "{{ ansible_date_time.date }}"

- include: cert_check.yml
  with_items: "{{ letsencrypt_certs }}"
  tags:
    - renew_certs

#################################################
# cleanup
#################################################

- name: remove account key file
  file:
    path: "{{ letsencrypt_account_key }}"
    state: absent
  when: letsencrypt_account_key_remove
